#!/usr/bin/env bash
set -Eeuo pipefail
export SHELLOPTS

msg(){
  echo "[pid:$$] $*" >&2
}

[[ -d "$NIX_REACT_NATIVE_GRADLE_CACHE_PATH" ]] || ( msg "ERROR: NIX_REACT_NATIVE_GRADLE_CACHE_PATH var is not set to a directory. This env var is used to keep downloaded files between runs (just a development cache)."; exit 1 )

# This defines URLs of Maven repos we know about and use.
declare -a REPOS=(
  "https://repository.sonatype.org/content/groups/sonatype-public-grid"
  "https://dl.google.com/dl/android/maven2"
  "https://repo.maven.apache.org/maven2"
)

function nix_fetch() {
  local url
  url=$1
  if [[ -z "$url" ]];then
    msg "ERROR: nix_fetch got empty url"
    exit 1
  fi
  shift
  local sha
  sha=$(echo "$url" | sha256sum | awk '{print $1}')
  if [[ -f "$NIX_REACT_NATIVE_GRADLE_CACHE_PATH/$sha" ]] && [[ -s "$NIX_REACT_NATIVE_GRADLE_CACHE_PATH/$sha" ]];then
    msg "[c] $url from cache ($NIX_REACT_NATIVE_GRADLE_CACHE_PATH/$sha)"
    cat "$NIX_REACT_NATIVE_GRADLE_CACHE_PATH/$sha"
    return
  fi

  msg "[f] trying to fetch $url (to $NIX_REACT_NATIVE_GRADLE_CACHE_PATH/$sha)..." >&2
  if nix-prefetch-url --print-path --type sha256 "${url}" > "$NIX_REACT_NATIVE_GRADLE_CACHE_PATH/$sha.tmp" 2>/dev/null;then
    mv "$NIX_REACT_NATIVE_GRADLE_CACHE_PATH/$sha.tmp" "$NIX_REACT_NATIVE_GRADLE_CACHE_PATH/$sha"
    msg "[+] $url fetched." >&2
    cat "$NIX_REACT_NATIVE_GRADLE_CACHE_PATH/$sha"
    return
  else
    msg "[WARNING] fetching $url failed."
  fi
}

function get_nix_path() { echo "${1}" | tail -n1; }
function get_nix_sha() { echo "${1}" | head -n1; }
function get_sha1() { sha1sum "${1}" | cut -d' ' -f1; }

# Assumes REPOS from repos.sh is available
function match_repo_url() {
    for REPO_URL in "${REPOS[@]}"; do
        if [[ "$1" = ${REPO_URL}* ]]; then
            echo "${REPO_URL}"
            return
        fi
    done
    msg " ! Failed to match a repo for: ${1}"
    exit 1
}

if [[ -z "${1}" ]]; then
    msg "Required argument not given!"
    exit 1
fi

POM_URL=${1}
# Drop the POM extension
OBJ_REL_URL=${POM_URL%.pom}

msg " - Nix entry for: ${1##*/}"

REPO_URL=$(match_repo_url "${OBJ_REL_URL}")

if [[ -z "${REPO_URL}" ]]; then
    echo "\r\n ? REPO_URL: ${REPO_URL}" >&2
fi
# Get the relative path without full URL
OBJ_REL_NAME="${OBJ_REL_URL#${REPO_URL}/}"

OBJ_NIX_FETCH_OUT=$(nix_fetch "${OBJ_REL_URL}.jar")
# Dependency might be a JAR or an AAR
if [[ ${#OBJ_NIX_FETCH_OUT} -gt 0 ]]; then
    # Some deps have only a POM, nor JAR or AAR
    OBJ_TYPE="jar"
    OBJ_PATH=$(get_nix_path "${OBJ_NIX_FETCH_OUT}")
    OBJ_SHA256=$(get_nix_sha "${OBJ_NIX_FETCH_OUT}")
    OBJ_SHA1=$(get_sha1 "${OBJ_PATH}")
else
    OBJ_NIX_FETCH_OUT=$(nix_fetch "${OBJ_REL_URL}.aar")
    if [[ ${#OBJ_NIX_FETCH_OUT} -gt 0 ]]; then
        OBJ_TYPE="aar"
        OBJ_PATH=$(get_nix_path "${OBJ_NIX_FETCH_OUT}")
        OBJ_SHA256=$(get_nix_sha "${OBJ_NIX_FETCH_OUT}")
        OBJ_SHA1=$(get_sha1 "${OBJ_PATH}")
    else
        OBJ_TYPE="pom"
    fi
fi

# Both JARs and AARs have a POM
POM_NIX_FETCH_OUT=$(nix_fetch "${OBJ_REL_URL}.pom")
POM_PATH=$(get_nix_path "${POM_NIX_FETCH_OUT}")
if [[ -z "${POM_PATH}" ]]; then
    msg " ! Failed to fetch: ${OBJ_REL_URL}.pom"
    exit 1
fi
POM_SHA256=$(get_nix_sha "${POM_NIX_FETCH_OUT}")
POM_SHA1=$(get_sha1 "${POM_PATH}")

# Format into a Nix attrset entry
echo -ne "
  {
    \"path\": \"${OBJ_REL_NAME}\",
    \"host\": \"${REPO_URL}\",
    \"type\": \"${OBJ_TYPE}\","
if [[ -n "${POM_SHA256}" ]]; then
    echo -n "
    \"pom\": {
      \"sha1\": \"${POM_SHA1}\",
      \"sha256\": \"${POM_SHA256}\"
    }";[[ -n "${OBJ_SHA256:-}" ]] && echo -n ","
fi
if [[ -n "${OBJ_SHA256:-}" ]]; then
    echo -n "
    \"jar\": {
      \"sha1\": \"${OBJ_SHA1}\",
      \"sha256\": \"${OBJ_SHA256}\"
    }"
fi
echo -e "\n  }"

